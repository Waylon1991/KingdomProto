syntax = "proto3";

package protocol.client;

import "errcode/error.proto";
import "common/common.proto";

option go_package = "github.com/Waylon1991/KingdomProto/client;client";

//登录走的http ✔
enum CP {
    Default = 0;

    // gate 协议
    Error_Code_Resp = 1;   //统一的错误码返回 ✔
    Valid_Key_Req   = 2;   //验证 key ✔
    Kick_Out_Push   = 3;   //顶号推送 空协议体 ✔
    Heart_Ping_Req  = 10;  //心跳请求 空协议体 ✔
    Heart_Ping_Resp = 11;  //心跳返回 空协议体 ✔

    // lobby 协议
    Enter_Lobby_Resp  = 1001;  //进入大厅返回 ✔
    Create_Room_Req   = 1002;  //创建房间
    Create_Room_Resp  = 1003;
    Join_Room_Req     = 1004;  //加入房间
    Enter_Match_Req   = 1005;  //进入匹配 ✔
    Enter_Match_Resp  = 1006;  //进入匹配返回 ✔
    Cancel_Match_Req  = 1007;  //取消匹配 ✔
    Cancel_Match_Resp = 1008;  //取消匹配返回 ✔
    Match_Suc_Push    = 1009;  //匹配成功推送 ✔
    Match_Fail_Push   = 1100;  //匹配失败推送 ✔

    // match 协议
    Match_Select_Hero_Req    = 2001;  //选择英雄 ✔
    Match_Select_Hero_Resp   = 2002;
    Match_UnSelect_Hero_Req  = 2003;  //取消选择
    Match_UnSelect_Hero_Resp = 2004;
    Match_Select_Info_Push   = 2005;  //推送 其他模式可能需要 ✔

    // room 协议
    Room_Enter_Table_Push      = 3001;  //推送游戏信息（进入桌子）
    Room_Start_Game_Push       = 3002;  //推送游戏开始
    Room_System_Send_Card_Push = 3003;  //推送系统发牌
    Room_Operate_Info_Push     = 3004;  //推送轮到谁操作

    Room_Use_Buff_Req     = 3100;  //请求使用buff
    Room_Use_Buff_Resp    = 3101;  //返回使用buff(客户端是否需要？)
    Room_Lose_Buff_Push   = 3102;  //推送失去buff
    Room_Obtain_Buff_Push = 3103;  //推送获得buff

    Room_Out_Card_Req     = 3200;  //请求打出卡牌
    Room_Out_Card_Resp    = 3201;  //返回打出卡牌(客户端是否需要？)
    Room_Out_Card_Push    = 3202;  //推送打出卡牌
    Room_Lose_Card_Push   = 3203;  //推送失去卡牌
    Room_Obtain_Card_Push = 3204;  //推送获得卡牌
    Room_Sell_Card_Req    = 3205;  //请求出售卡牌
    Room_Sell_Card_Resp   = 3206;  //返回出售卡牌结果
    Room_Left_Card_Push   = 3207;  //推送牌堆剩余牌数

    Room_Use_Skill_Req      = 3300;  //请求使用技能
    Room_Use_Skill_Resp     = 3301;  //返回使用技能(客户端是否需要？)
    Room_Use_Skill_Push     = 3302;  //推送使用技能
    Room_Upgrade_Skill_Push = 3303;  //推送升级技能
    Room_Active_Skill_Push  = 3304;  //推送激活技能

    Room_Roll_Dice_Req     = 3400;  //请求掷骰子
    Room_Roll_Dice_Resp    = 3401;  //返回掷骰子(客户端是否需要？)
    Room_Roll_Dice_Push    = 3402;  //推送掷骰子
    Room_Give_Up_Dice_Req  = 3403;  //请求放弃掷骰子
    Room_Give_Up_Dice_Resp = 3404;  //返回放弃掷骰子
    Room_Give_Up_Dice_Push = 3405;  //推送放弃掷骰子

    Room_Obtain_Blood_Push = 3500;  //推送获得血量
    Room_Lose_Blood_Push   = 3501;  //推送失去血量
    Room_Obtain_CP_Push    = 3502;  //推送获得战斗点数
    Room_Lose_CP_Push      = 3503;  //推送失去战斗点数

    Room_Use_Tool_Req     = 3600;  //请求使用道具
    Room_Use_Tool_Resp    = 3601;  //返回使用道具(客户端是否需要？)
    Room_Use_Tool_Push    = 3602;  //推送使用道具
    Room_Active_Tool_Push = 3603;  //推送可用道具

    Room_Skip_Stage_Req  = 3700;  //请求进入下一阶段
    Room_Skip_Stage_Resp = 3701;  //返回进入下一阶段
    Room_Skip_Stage_Push = 3702;  //推送进入下一阶段

    Room_Reward_Ball_Push    = 3800;  //推送占卜球的进度
    Room_Operate_Record_Push = 3801;  //推送操作记录

    Room_Game_Over_Push = 3900;  //推送游戏结束
}

// -------------------------------- gate 结构体-----------------------------------------//
message ErrorCodeResp {
    errcode.ErrorType code = 1;  //错误码
    CP protocol_id         = 2;  //协议号
}

message ValidKeyReq {
    int32 user_id = 1;  //用户 id
    string key    = 2;  // key
}

//顶号推送
message KickOutPush {
}

//心跳请求
message HeartPingReq {
}

//心跳返回
message HeartPingResp {
}

// -------------------------------- lobby 结构体-----------------------------------------//
message EnterLobbyResp {
    int32 user_id = 1;  //用户 id
}

message CreateRoomReq {
    int32 user_id = 1;  //用户 id
    int32 mode    = 2;  //模式
}

message JoinRoomReq {
    int32 room_id = 1;  //用户 id
    int32 mode    = 2;  //模式
}

//请求匹配
message EnterMatchReq {
    common.RoomMode mode = 1;  //模式
}

//等待匹配中
message EnterMatchResp {
    common.RoomMode mode = 1;  //模式
    int32 total          = 2;  // 匹配人数
    int32 pre_time       = 3;  //预计时间
}

//取消匹配
message CancelMatchReq {
}

//取消匹配返回 有可能取消失败
message CancelMatchResp {
    bool suc = 1;  //取消是否成功
}

//匹配成功
message MatchSucPush {
    common.RoomMode mode       = 1;  //模式
    repeated common.Hero heros = 2;  //英雄列表
    int32 over_time            = 3;  //超时秒数
}

//匹配失败
message MatchFailPush {
    string reason = 1;
}

// -------------------------------- match 结构体-----------------------------------------//
//选择英雄
message MatchSelectHeroReq {
    int32 hero_id = 1;
}

//选择英雄
message MatchSelectHeroResp {
    bool suc           = 1;  //是否成功
    string fail_reason = 2;  //失败的原因
}

//取消选择英雄
message MatchUnSelectHeroReq {
}

//选择英雄
message MatchUnSelectHeroResp {
    bool suc           = 1;  //是否成功
    string fail_reason = 2;  //失败的原因
}

//推送
message MatchSelectInfoPush {
    map<int32, int32> infos    = 1;  //用户选择信息
    repeated common.Hero heros = 2;  //英雄列表
}

// -------------------------------- room 结构体-----------------------------------------//

//推送
message RoomEnterTablePush {
    common.RoomInfo info = 1;
}

//推送游戏开始
message RoomStartGamePush {
}

//推送系统发牌
message RoomSystemSendCardPush {
    repeated common.RoomCard cards = 1;  //抓到的牌
}

//推送轮到谁操作
message RoomOperateInfoPush {
    common.OperateSeatInfo seat_info = 1;
}

//请求使用buff
message RoomUseBuffReq {
    int32 buff_id            = 1;  // buff id
    repeated int32 obj_seats = 2;  //目标座位，不传就根据id来自动判断，如果判断不了会返回错误
}

//返回使用buff(客户端是否需要？)
message RoomUseBuffResp {
    bool suc      = 1;  //是否成功
    string reason = 2;  //原因
}

//推送失去 buff
message RoomLoseBuffPush {
    int32 seat              = 1;  //失去的 buff 的玩家
    repeated int32 buff_ids = 2;  //失去的 buff id 列表
}

//推送获得 buff
message RoomObtainBuffPush {
    int32 seat              = 1;  //获得的 buf的玩家
    repeated int32 buff_ids = 2;  //获得的 buff id 列表
}

//请求打出卡牌
message RoomOutCardReq {
    int32 card_id            = 1;  //打出的卡牌 id
    repeated int32 obj_seats = 2;  //目标座位，不传就根据id来自动判断，如果判断不了会返回错误
}

//返回打出卡牌(客户端是否需要？)
message RoomOutCardResp {
    bool suc      = 1;  //是否成功
    string reason = 2;  //原因
}

//推送打出卡牌
message RoomOutCardPush {
    int32 seat    = 1;  //打出的卡牌的玩家
    int32 card_id = 2;  //打出的卡牌 id
}

//推送失去卡牌
message RoomLoseCardPush {
    int32 seat              = 1;  //失去的卡牌的玩家
    repeated int32 card_ids = 2;  //失去的卡牌 id
}

//推送获得卡牌
message RoomObtainCardPush {
    int32 seat              = 1;  //获得的卡牌的玩家
    repeated int32 card_ids = 2;  //获得的卡牌 id
}

//请求出售卡牌
message RoomSellCardReq {
    repeated int32 card_ids = 1;  //出售卡牌列表
}

//返回出售卡牌结果
message RoomSellCardResp {
    bool suc      = 1;  //是否成功
    string reason = 2;  //原因
}

//推送牌堆剩余牌数
message RoomLeftCardPush {
    int32 seat          = 1;  //卡牌玩家座位
    int32 left_card_num = 2;  //剩余牌数量
}

//请求使用技能
message RoomUseSkillReq {
    int32 skill_id           = 1;  //使用的技能 id
    repeated int32 obj_seats = 2;  //目标座位，不传就根据id来自动判断，如果判断不了会返回错误
}

//返回使用技能(客户端是否需要？)
message RoomUseSkillResp {
    bool suc      = 1;  //是否成功
    string reason = 2;  //原因
}

//推送使用技能
message RoomUseSkillPush {
    int32 seat               = 1;  //使用技能的玩家
    int32 skill_id           = 2;  //使用的技能id
    repeated int32 obj_seats = 3;  //目标座位，不传就根据id来自动判断，如果判断不了会返回错误
}

//推送升级技能
message RoomUpgradeSkillPush {
    int32 seat     = 1;  //升级技能的玩家
    int32 skill_id = 2;  //升级的技能id
}

//推送激活技能
message RoomActiveSkillPush {
    int32 seat               = 1;  //激活技能的玩家
    repeated int32 skill_ids = 2;  //激活的技能ids
}

//请求掷骰子
message RoomRollDiceReq {
    int32 dice_num = 1;  //骰子的个数，默认使用特定阶段的骰子数量，如若没有使用客户端上传的。
}

//返回掷骰子(客户端是否需要？)
message RoomRollDiceResp {
    bool suc      = 1;  //是否成功
    string reason = 2;  //原因
}

//推送掷骰子
message RoomRollDicePush {
    repeated common.DiceFace df = 1;  //筛子结果
}

//请求放弃掷骰子
message RoomGiveUpDiceReq {
}

//返回放弃掷骰子
message RoomGiveUpDiceResp {
    bool suc      = 1;  //是否成功
    string reason = 2;  //原因
}

//推送放弃掷骰子
message RoomGiveUpDicePush {
    int32 seat_id = 1;  //放弃掷骰子的玩家
}

//推送获得血量
message RoomObtainBloodPush {
    int32 seat_id   = 1;  //座位号
    int32 blood_num = 2;  //血量
}

//推送失去血量
message RoomLoseBloodPush {
    int32 seat_id   = 1;  //座位号
    int32 blood_num = 2;  //血量
}

//推送获得战斗点数
message RoomObtainCPPush {
    int32 seat_id = 1;  //座位号
    int32 cp_num  = 2;  // cp点数
}

//推送失去战斗点数
message RoomLoseCPPush {
    int32 seat_id = 1;  //座位号
    int32 cp_num  = 2;  // cp点数
}

//请求使用道具
message RoomUseToolReq {
}

//返回使用道具(客户端是否需要？)
message RoomUseToolResp {
}

//推送使用道具
message RoomUseToolPush {
}

//推送可用道具
message RoomActiveToolPush {
}

//请求进入下一阶段
message RoomSkipStageReq {
}

//返回进入下一阶段
message RoomSkipStageResp {
    bool suc      = 1;  //是否成功
    string reason = 2;  //原因
}

//推送进入下一阶段
message RoomSkipStagePush {
    common.GameStage stage = 1;  //当前阶段
}

//推送占卜球的进度
message RoomRewardBallPush {
    common.RewardBall ball = 1;
}

//推送操作记录
message RoomOperateRecordPush {
    common.OperateRecord record = 1;
}

//推送游戏结束
message RoomGameOverPush {
}

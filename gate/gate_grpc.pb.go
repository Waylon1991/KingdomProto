// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GateClient is the client API for Gate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GateClient interface {
	GateInfo(ctx context.Context, in *GateInfoRequest, opts ...grpc.CallOption) (*GateInfoReply, error)
	Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastReply, error)
}

type gateClient struct {
	cc grpc.ClientConnInterface
}

func NewGateClient(cc grpc.ClientConnInterface) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) GateInfo(ctx context.Context, in *GateInfoRequest, opts ...grpc.CallOption) (*GateInfoReply, error) {
	out := new(GateInfoReply)
	err := c.cc.Invoke(ctx, "/protocol.gate.Gate/GateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastReply, error) {
	out := new(BroadcastReply)
	err := c.cc.Invoke(ctx, "/protocol.gate.Gate/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateServer is the server API for Gate service.
// All implementations must embed UnimplementedGateServer
// for forward compatibility
type GateServer interface {
	GateInfo(context.Context, *GateInfoRequest) (*GateInfoReply, error)
	Broadcast(context.Context, *BroadcastRequest) (*BroadcastReply, error)
	mustEmbedUnimplementedGateServer()
}

// UnimplementedGateServer must be embedded to have forward compatible implementations.
type UnimplementedGateServer struct {
}

func (UnimplementedGateServer) GateInfo(context.Context, *GateInfoRequest) (*GateInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GateInfo not implemented")
}
func (UnimplementedGateServer) Broadcast(context.Context, *BroadcastRequest) (*BroadcastReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedGateServer) mustEmbedUnimplementedGateServer() {}

// UnsafeGateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GateServer will
// result in compilation errors.
type UnsafeGateServer interface {
	mustEmbedUnimplementedGateServer()
}

func RegisterGateServer(s grpc.ServiceRegistrar, srv GateServer) {
	s.RegisterService(&Gate_ServiceDesc, srv)
}

func _Gate_GateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).GateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gate.Gate/GateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).GateInfo(ctx, req.(*GateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.gate.Gate/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).Broadcast(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gate_ServiceDesc is the grpc.ServiceDesc for Gate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.gate.Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GateInfo",
			Handler:    _Gate_GateInfo_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _Gate_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/gate/gate.proto",
}

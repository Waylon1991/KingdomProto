// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: match/match.proto

package match

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/Waylon1991/KingdomProto/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.RoomMode(0)
)

// Validate checks the field values on MatchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MatchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MatchRequestMultiError, or
// nil if none found.
func (m *MatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mode

	if m.GetUserId() <= 0 {
		err := MatchRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MatchRequestMultiError(errors)
	}
	return nil
}

// MatchRequestMultiError is an error wrapping multiple validation errors
// returned by MatchRequest.ValidateAll() if the designated constraints aren't met.
type MatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MatchRequestMultiError) AllErrors() []error { return m }

// MatchRequestValidationError is the validation error returned by
// MatchRequest.Validate if the designated constraints aren't met.
type MatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchRequestValidationError) ErrorName() string { return "MatchRequestValidationError" }

// Error satisfies the builtin error interface
func (e MatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchRequestValidationError{}

// Validate checks the field values on MatchReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MatchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MatchReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MatchReplyMultiError, or
// nil if none found.
func (m *MatchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MatchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for PreTime

	if len(errors) > 0 {
		return MatchReplyMultiError(errors)
	}
	return nil
}

// MatchReplyMultiError is an error wrapping multiple validation errors
// returned by MatchReply.ValidateAll() if the designated constraints aren't met.
type MatchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MatchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MatchReplyMultiError) AllErrors() []error { return m }

// MatchReplyValidationError is the validation error returned by
// MatchReply.Validate if the designated constraints aren't met.
type MatchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchReplyValidationError) ErrorName() string { return "MatchReplyValidationError" }

// Error satisfies the builtin error interface
func (e MatchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchReplyValidationError{}

// Validate checks the field values on CancelMatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelMatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelMatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelMatchRequestMultiError, or nil if none found.
func (m *CancelMatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelMatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CancelMatchRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelMatchRequestMultiError(errors)
	}
	return nil
}

// CancelMatchRequestMultiError is an error wrapping multiple validation errors
// returned by CancelMatchRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelMatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelMatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelMatchRequestMultiError) AllErrors() []error { return m }

// CancelMatchRequestValidationError is the validation error returned by
// CancelMatchRequest.Validate if the designated constraints aren't met.
type CancelMatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMatchRequestValidationError) ErrorName() string {
	return "CancelMatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelMatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMatchRequestValidationError{}

// Validate checks the field values on CancelMatchReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelMatchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelMatchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelMatchReplyMultiError, or nil if none found.
func (m *CancelMatchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelMatchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Suc

	if len(errors) > 0 {
		return CancelMatchReplyMultiError(errors)
	}
	return nil
}

// CancelMatchReplyMultiError is an error wrapping multiple validation errors
// returned by CancelMatchReply.ValidateAll() if the designated constraints
// aren't met.
type CancelMatchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelMatchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelMatchReplyMultiError) AllErrors() []error { return m }

// CancelMatchReplyValidationError is the validation error returned by
// CancelMatchReply.Validate if the designated constraints aren't met.
type CancelMatchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelMatchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelMatchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelMatchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelMatchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelMatchReplyValidationError) ErrorName() string { return "CancelMatchReplyValidationError" }

// Error satisfies the builtin error interface
func (e CancelMatchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelMatchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelMatchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelMatchReplyValidationError{}

// Validate checks the field values on SelectHeroRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SelectHeroRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectHeroRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectHeroRequestMultiError, or nil if none found.
func (m *SelectHeroRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectHeroRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetHeroId() <= 0 {
		err := SelectHeroRequestValidationError{
			field:  "HeroId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := SelectHeroRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SelectHeroRequestMultiError(errors)
	}
	return nil
}

// SelectHeroRequestMultiError is an error wrapping multiple validation errors
// returned by SelectHeroRequest.ValidateAll() if the designated constraints
// aren't met.
type SelectHeroRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectHeroRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectHeroRequestMultiError) AllErrors() []error { return m }

// SelectHeroRequestValidationError is the validation error returned by
// SelectHeroRequest.Validate if the designated constraints aren't met.
type SelectHeroRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectHeroRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectHeroRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectHeroRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectHeroRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectHeroRequestValidationError) ErrorName() string {
	return "SelectHeroRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SelectHeroRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectHeroRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectHeroRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectHeroRequestValidationError{}

// Validate checks the field values on SelectHeroReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SelectHeroReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectHeroReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectHeroReplyMultiError, or nil if none found.
func (m *SelectHeroReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectHeroReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SelectHeroReplyValidationError{
						field:  fmt.Sprintf("Infos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SelectHeroReplyValidationError{
						field:  fmt.Sprintf("Infos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SelectHeroReplyValidationError{
					field:  fmt.Sprintf("Infos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHeros() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SelectHeroReplyValidationError{
						field:  fmt.Sprintf("Heros[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SelectHeroReplyValidationError{
						field:  fmt.Sprintf("Heros[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SelectHeroReplyValidationError{
					field:  fmt.Sprintf("Heros[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SelectHeroReplyMultiError(errors)
	}
	return nil
}

// SelectHeroReplyMultiError is an error wrapping multiple validation errors
// returned by SelectHeroReply.ValidateAll() if the designated constraints
// aren't met.
type SelectHeroReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectHeroReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectHeroReplyMultiError) AllErrors() []error { return m }

// SelectHeroReplyValidationError is the validation error returned by
// SelectHeroReply.Validate if the designated constraints aren't met.
type SelectHeroReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectHeroReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectHeroReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectHeroReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectHeroReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectHeroReplyValidationError) ErrorName() string { return "SelectHeroReplyValidationError" }

// Error satisfies the builtin error interface
func (e SelectHeroReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectHeroReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectHeroReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectHeroReplyValidationError{}
